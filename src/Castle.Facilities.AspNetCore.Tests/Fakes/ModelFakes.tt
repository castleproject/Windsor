<#@ template debug="false" hostspecific="false" language="C#" #><#@ assembly name="System.Core" #><#@ import namespace="System.Linq" #><#@ import namespace="System.Text" #><#@ import namespace="System.Collections.Generic" #><#@ output extension=".cs" #><#
	var lifestyles = new[] {
		"Transient", 
		"Scoped", 
		"Singleton"
	};
	
	var lifestyleTargets = new[] {
		"ServiceProviderOnly", 
		"WindsorOnly", 
		"CrossWired"
	};
#>// Copyright 2004-2018 Castle Project - http://www.castleproject.org/
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This file was automatically generated by 'ModelFakes.tt', please don't edit manually.

namespace Castle.Facilities.AspNetCore.Tests.Fakes
{	
	using System;

	using Castle.Core;
	using Castle.MicroKernel.Registration;
	using Castle.Windsor;

	using Microsoft.AspNetCore.Mvc;
	using Microsoft.AspNetCore.Razor.TagHelpers;
	using Microsoft.Extensions.DependencyInjection;

	public partial class OpenOptions {}
	public partial class ClosedOptions {}

	public interface IDisposableObservable 
	{
		bool Disposed { get;set; }
		int DisposedCount { get;set; }
	}

	public interface IWeakReferenceObservable 
	{
		bool HasReference { get; }
	}
<# 
	foreach(var lifestyleTarget in lifestyleTargets) 
	{
		foreach(var lifestyle in lifestyles) 
		{
#>
	public partial class <#=lifestyleTarget#><#=lifestyle#> : IWeakReferenceObservable 
	{
		private readonly WeakReference reference;

		public <#=lifestyleTarget#><#=lifestyle#>()
		{
			reference = new WeakReference(this, false);
		}

		public bool HasReference => reference.IsAlive;
	}
<# 
#>
	public partial class <#=lifestyleTarget#><#=lifestyle#>Generic<T> : <#=lifestyleTarget#><#=lifestyle#> { }
<# 
#>
	public partial class <#=lifestyleTarget#><#=lifestyle#>Disposable : <#=lifestyleTarget#><#=lifestyle#>, IDisposable, IDisposableObservable, IWeakReferenceObservable
	{ 
		public bool Disposed { get;set; }
		public int DisposedCount { get;set; }
		public void Dispose() { Disposed = true; DisposedCount++; } 
	}
<# 
		}
	}
#>
	public partial class ModelInstaller 
	{
		public static void RegisterWindsor(IWindsorContainer container) 
		{
<# 
		foreach(var lifestyleTarget in lifestyleTargets) 
		{
			if (lifestyleTarget != "WindsorOnly") continue;

			foreach(var lifestyle in lifestyles) 
			{
#>			container.Register(Component.For<<#=lifestyleTarget#><#=lifestyle#>>().Lifestyle<#=lifestyle#>()); <#="\r\n"#><# 
#>			container.Register(Component.For(typeof(<#=lifestyleTarget#><#=lifestyle#>Generic<>)).Lifestyle<#=lifestyle#>()); <#="\r\n"#><# 
#>			container.Register(Component.For<<#=lifestyleTarget#><#=lifestyle#>Generic<ClosedOptions>>().Lifestyle<#=lifestyle#>()); <#="\r\n"#><# 
#>			container.Register(Component.For<<#=lifestyleTarget#><#=lifestyle#>Disposable>().Lifestyle<#=lifestyle#>()); <#="\r\n\r\n"#><# 
			}
#>			container.Register(Component.For<ControllerWindsorOnly>().LifestyleScoped()); <#="\r\n"#><# 
#>			container.Register(Component.For<TagHelperWindsorOnly>().LifestyleScoped()); <#="\r\n"#><# 
#>			container.Register(Component.For<ViewComponentWindsorOnly>().LifestyleScoped()); <#="\r\n"#><# 
		}
#>

		}
		
		public static void RegisterServiceCollection(IServiceCollection services) 
		{
<# 
		foreach(var lifestyleTarget in lifestyleTargets) 
		{
			if (lifestyleTarget != "ServiceProviderOnly") continue;

			foreach(var lifestyle in lifestyles) 
			{
#>			services.Add<#=lifestyle#><<#=lifestyleTarget#><#=lifestyle#>>(); <#="\r\n"#><# 
#>			services.Add<#=lifestyle#>(typeof(<#=lifestyleTarget#><#=lifestyle#>Generic<OpenOptions>)); <#="\r\n"#><# 
#>			services.Add<#=lifestyle#><<#=lifestyleTarget#><#=lifestyle#>Generic<ClosedOptions>>(); <#="\r\n"#><# 
#>			services.Add<#=lifestyle#><<#=lifestyleTarget#><#=lifestyle#>Disposable>(); <#="\r\n\r\n"#><# 
			}
#>			services.AddScoped<ControllerServiceProviderOnly>(); <#="\r\n"#><# 
#>			services.AddScoped<TagHelperServiceProviderOnly>(); <#="\r\n"#><# 
#>			services.AddScoped<ViewComponentServiceProviderOnly>(); <#="\r\n"#><# 
		}
#>

		}
		
		public static void RegisterCrossWired(IWindsorContainer container, IServiceCollection serviceCollection) 
		{
<# 
		foreach(var lifestyleTarget in lifestyleTargets) 
		{
			if (lifestyleTarget != "CrossWired") continue;

			foreach(var lifestyle in lifestyles) 
			{
#>			container.Register(Component.For<<#=lifestyleTarget#><#=lifestyle#>>().CrossWired().Lifestyle<#=lifestyle#>()); <#="\r\n"#><# 
#>			container.Register(Component.For<<#=lifestyleTarget#><#=lifestyle#>Generic<OpenOptions>>().CrossWired().Lifestyle<#=lifestyle#>()); <#="\r\n"#><# 
#>			container.Register(Component.For<<#=lifestyleTarget#><#=lifestyle#>Generic<ClosedOptions>>().CrossWired().Lifestyle<#=lifestyle#>()); <#="\r\n"#><# 
#>			container.Register(Component.For<<#=lifestyleTarget#><#=lifestyle#>Disposable>().CrossWired().Lifestyle<#=lifestyle#>()); <#="\r\n\r\n"#><# 
			}
#>			container.Register(Component.For<OpenOptions>().CrossWired().LifestyleSingleton());  <#="\r\n"#><# 
#>			container.Register(Component.For<ControllerCrossWired>().CrossWired().LifestyleScoped());  <#="\r\n"#><# 
#>			container.Register(Component.For<TagHelperCrossWired>().CrossWired().LifestyleScoped());  <#="\r\n"#><# 
#>			container.Register(Component.For<ViewComponentCrossWired>().CrossWired().LifestyleScoped());  <#="\r\n"#><# 
		}
#>
		}
	}

	public partial class ControllerWindsorOnly : Controller
	{
		public ControllerWindsorOnly
		(
<# 
		foreach(var lifestyleTarget in lifestyleTargets) 
		{
			if (lifestyleTarget != "WindsorOnly") continue;

			foreach(var lifestyle in lifestyles) 
			{
#>			<#=lifestyleTarget#><#=lifestyle#> <#=lifestyleTarget#><#=lifestyle#>1, <#="\r\n"#><# 
#>			<#=lifestyleTarget#><#=lifestyle#>Generic<OpenOptions> <#=lifestyleTarget#><#=lifestyle#>2, <#="\r\n"#><# 
#>			<#=lifestyleTarget#><#=lifestyle#>Generic<ClosedOptions> <#=lifestyleTarget#><#=lifestyle#>3, <#="\r\n"#><# 
#>			<#=lifestyleTarget#><#=lifestyle#>Disposable <#=lifestyleTarget#><#=lifestyle#>4<# 

			var a = Array.IndexOf(lifestyles, lifestyle)+1; 
			var b = Array.IndexOf(lifestyleTargets, lifestyleTarget)+1; 
			var index = (a) * (b); #> <#= index < 6 ? ",\r\n" : "" #><# 
			}
		}
#>)
		{
<# 
		foreach(var lifestyleTarget in lifestyleTargets) 
		{
			if (lifestyleTarget != "WindsorOnly") continue;

			foreach(var lifestyle in lifestyles) 
			{
#>			if (<#=lifestyleTarget#><#=lifestyle#>1 == null) throw new ArgumentException(nameof(<#=lifestyleTarget#><#=lifestyle#>1)); <#="\r\n"#><# 
#>			if (<#=lifestyleTarget#><#=lifestyle#>2 == null) throw new ArgumentException(nameof(<#=lifestyleTarget#><#=lifestyle#>2)); <#="\r\n"#><# 
#>			if (<#=lifestyleTarget#><#=lifestyle#>3 == null) throw new ArgumentException(nameof(<#=lifestyleTarget#><#=lifestyle#>3)); <#="\r\n"#><# 
#>			if (<#=lifestyleTarget#><#=lifestyle#>4 == null) throw new ArgumentException(nameof(<#=lifestyleTarget#><#=lifestyle#>4)); <#="\r\n"#><# 
			}
		}
#>		}
	}

	public partial class TagHelperWindsorOnly : TagHelper
	{
		public TagHelperWindsorOnly
		(
<# 
		foreach(var lifestyleTarget in lifestyleTargets) 
		{
			if (lifestyleTarget != "WindsorOnly") continue;

			foreach(var lifestyle in lifestyles) 
			{
#>			<#=lifestyleTarget#><#=lifestyle#> <#=lifestyleTarget#><#=lifestyle#>1, <#="\r\n"#><# 
#>			<#=lifestyleTarget#><#=lifestyle#>Generic<OpenOptions> <#=lifestyleTarget#><#=lifestyle#>2, <#="\r\n"#><# 
#>			<#=lifestyleTarget#><#=lifestyle#>Generic<ClosedOptions> <#=lifestyleTarget#><#=lifestyle#>3, <#="\r\n"#><# 
#>			<#=lifestyleTarget#><#=lifestyle#>Disposable <#=lifestyleTarget#><#=lifestyle#>4<# 

			var a = Array.IndexOf(lifestyles, lifestyle)+1; 
			var b = Array.IndexOf(lifestyleTargets, lifestyleTarget)+1; 
			var index = (a) * (b); #> <#= index < 6 ? ",\r\n" : "" #><# 
			}
		}
#>)
		{
<# 
		foreach(var lifestyleTarget in lifestyleTargets) 
		{
			if (lifestyleTarget != "WindsorOnly") continue;

			foreach(var lifestyle in lifestyles) 
			{
#>			if (<#=lifestyleTarget#><#=lifestyle#>1 == null) throw new ArgumentException(nameof(<#=lifestyleTarget#><#=lifestyle#>1)); <#="\r\n"#><# 
#>			if (<#=lifestyleTarget#><#=lifestyle#>2 == null) throw new ArgumentException(nameof(<#=lifestyleTarget#><#=lifestyle#>2)); <#="\r\n"#><# 
#>			if (<#=lifestyleTarget#><#=lifestyle#>3 == null) throw new ArgumentException(nameof(<#=lifestyleTarget#><#=lifestyle#>3)); <#="\r\n"#><# 
#>			if (<#=lifestyleTarget#><#=lifestyle#>4 == null) throw new ArgumentException(nameof(<#=lifestyleTarget#><#=lifestyle#>4)); <#="\r\n"#><# 
			}
		}
#>		}
	}

	public class ViewComponentWindsorOnly : ViewComponent
	{
		public ViewComponentWindsorOnly
		(
<# 
		foreach(var lifestyleTarget in lifestyleTargets) 
		{
			if (lifestyleTarget != "WindsorOnly") continue;

			foreach(var lifestyle in lifestyles) 
			{
#>			<#=lifestyleTarget#><#=lifestyle#> <#=lifestyleTarget#><#=lifestyle#>1, <#="\r\n"#><# 
#>			<#=lifestyleTarget#><#=lifestyle#>Generic<OpenOptions> <#=lifestyleTarget#><#=lifestyle#>2, <#="\r\n"#><# 
#>			<#=lifestyleTarget#><#=lifestyle#>Generic<ClosedOptions> <#=lifestyleTarget#><#=lifestyle#>3, <#="\r\n"#><# 
#>			<#=lifestyleTarget#><#=lifestyle#>Disposable <#=lifestyleTarget#><#=lifestyle#>4<# 

			var a = Array.IndexOf(lifestyles, lifestyle)+1; 
			var b = Array.IndexOf(lifestyleTargets, lifestyleTarget)+1; 
			var index = (a) * (b); #> <#= index < 6 ? ",\r\n" : "" #><# 
			}
		}
#>)
		{
<# 
		foreach(var lifestyleTarget in lifestyleTargets) 
		{
			if (lifestyleTarget != "WindsorOnly") continue;

			foreach(var lifestyle in lifestyles) 
			{
#>			if (<#=lifestyleTarget#><#=lifestyle#>1 == null) throw new ArgumentException(nameof(<#=lifestyleTarget#><#=lifestyle#>1)); <#="\r\n"#><# 
#>			if (<#=lifestyleTarget#><#=lifestyle#>2 == null) throw new ArgumentException(nameof(<#=lifestyleTarget#><#=lifestyle#>2)); <#="\r\n"#><# 
#>			if (<#=lifestyleTarget#><#=lifestyle#>3 == null) throw new ArgumentException(nameof(<#=lifestyleTarget#><#=lifestyle#>3)); <#="\r\n"#><# 
#>			if (<#=lifestyleTarget#><#=lifestyle#>4 == null) throw new ArgumentException(nameof(<#=lifestyleTarget#><#=lifestyle#>4)); <#="\r\n"#><# 
			}
		}
#>		}
	}

	public partial class ControllerServiceProviderOnly : Controller
	{
		public ControllerServiceProviderOnly
		(
<# 
		foreach(var lifestyleTarget in lifestyleTargets) 
		{
			if (lifestyleTarget != "ServiceProviderOnly") continue;

			foreach(var lifestyle in lifestyles) 
			{
#>			<#=lifestyleTarget#><#=lifestyle#> <#=lifestyleTarget#><#=lifestyle#>1, <#="\r\n"#><# 
#>			<#=lifestyleTarget#><#=lifestyle#>Generic<OpenOptions> <#=lifestyleTarget#><#=lifestyle#>2, <#="\r\n"#><# 
#>			<#=lifestyleTarget#><#=lifestyle#>Generic<ClosedOptions> <#=lifestyleTarget#><#=lifestyle#>3, <#="\r\n"#><# 
#>			<#=lifestyleTarget#><#=lifestyle#>Disposable <#=lifestyleTarget#><#=lifestyle#>4<# 

			var a = Array.IndexOf(lifestyles, lifestyle)+1; 
			var b = Array.IndexOf(lifestyleTargets, lifestyleTarget)+1; 
			var index = (a) * (b); #> <#= index < 3 ? ",\r\n" : "" #><# 
			}
		}
#>)
		{
		}
	}

	public partial class TagHelperServiceProviderOnly : TagHelper
	{
		public TagHelperServiceProviderOnly
		(
<# 
		foreach(var lifestyleTarget in lifestyleTargets) 
		{
			if (lifestyleTarget != "ServiceProviderOnly") continue;

			foreach(var lifestyle in lifestyles) 
			{
#>			<#=lifestyleTarget#><#=lifestyle#> <#=lifestyleTarget#><#=lifestyle#>1, <#="\r\n"#><# 
#>			<#=lifestyleTarget#><#=lifestyle#>Generic<OpenOptions> <#=lifestyleTarget#><#=lifestyle#>2, <#="\r\n"#><# 
#>			<#=lifestyleTarget#><#=lifestyle#>Generic<ClosedOptions> <#=lifestyleTarget#><#=lifestyle#>3, <#="\r\n"#><# 
#>			<#=lifestyleTarget#><#=lifestyle#>Disposable <#=lifestyleTarget#><#=lifestyle#>4<# 

			var a = Array.IndexOf(lifestyles, lifestyle)+1; 
			var b = Array.IndexOf(lifestyleTargets, lifestyleTarget)+1; 
			var index = (a) * (b); #> <#= index < 3 ? ",\r\n" : "" #><# 
			}
		}
#>)
		{
<# 
		foreach(var lifestyleTarget in lifestyleTargets) 
		{
			if (lifestyleTarget != "ServiceProviderOnly") continue;

			foreach(var lifestyle in lifestyles) 
			{
#>			if (<#=lifestyleTarget#><#=lifestyle#>1 == null) throw new ArgumentException(nameof(<#=lifestyleTarget#><#=lifestyle#>1)); <#="\r\n"#><# 
#>			if (<#=lifestyleTarget#><#=lifestyle#>2 == null) throw new ArgumentException(nameof(<#=lifestyleTarget#><#=lifestyle#>2)); <#="\r\n"#><# 
#>			if (<#=lifestyleTarget#><#=lifestyle#>3 == null) throw new ArgumentException(nameof(<#=lifestyleTarget#><#=lifestyle#>3)); <#="\r\n"#><# 
#>			if (<#=lifestyleTarget#><#=lifestyle#>4 == null) throw new ArgumentException(nameof(<#=lifestyleTarget#><#=lifestyle#>4)); <#="\r\n"#><# 
			}
		}
#>		}
	}

	public partial class ViewComponentServiceProviderOnly : ViewComponent
	{
		public ViewComponentServiceProviderOnly
		(
<# 
		foreach(var lifestyleTarget in lifestyleTargets) 
		{
			if (lifestyleTarget != "ServiceProviderOnly") continue;

			foreach(var lifestyle in lifestyles) 
			{
#>			<#=lifestyleTarget#><#=lifestyle#> <#=lifestyleTarget#><#=lifestyle#>1, <#="\r\n"#><# 
#>			<#=lifestyleTarget#><#=lifestyle#>Generic<OpenOptions> <#=lifestyleTarget#><#=lifestyle#>2, <#="\r\n"#><# 
#>			<#=lifestyleTarget#><#=lifestyle#>Generic<ClosedOptions> <#=lifestyleTarget#><#=lifestyle#>3, <#="\r\n"#><# 
#>			<#=lifestyleTarget#><#=lifestyle#>Disposable <#=lifestyleTarget#><#=lifestyle#>4<# 

			var a = Array.IndexOf(lifestyles, lifestyle)+1; 
			var b = Array.IndexOf(lifestyleTargets, lifestyleTarget)+1; 
			var index = (a) * (b); #> <#= index < 3 ? ",\r\n" : "" #><# 
			}
		}
#>)
		{
<# 
		foreach(var lifestyleTarget in lifestyleTargets) 
		{
			if (lifestyleTarget != "ServiceProviderOnly") continue;

			foreach(var lifestyle in lifestyles) 
			{
#>			if (<#=lifestyleTarget#><#=lifestyle#>1 == null) throw new ArgumentException(nameof(<#=lifestyleTarget#><#=lifestyle#>1)); <#="\r\n"#><# 
#>			if (<#=lifestyleTarget#><#=lifestyle#>2 == null) throw new ArgumentException(nameof(<#=lifestyleTarget#><#=lifestyle#>2)); <#="\r\n"#><# 
#>			if (<#=lifestyleTarget#><#=lifestyle#>3 == null) throw new ArgumentException(nameof(<#=lifestyleTarget#><#=lifestyle#>3)); <#="\r\n"#><# 
#>			if (<#=lifestyleTarget#><#=lifestyle#>4 == null) throw new ArgumentException(nameof(<#=lifestyleTarget#><#=lifestyle#>4)); <#="\r\n"#><# 
			}
		}
#>		}
	}

	public partial class ControllerCrossWired : Controller
	{
		public ControllerCrossWired
		(
<# 
		foreach(var lifestyleTarget in lifestyleTargets) 
		{
			if (lifestyleTarget != "CrossWired") continue;

			foreach(var lifestyle in lifestyles) 
			{
#>			<#=lifestyleTarget#><#=lifestyle#> <#=lifestyleTarget#><#=lifestyle#>1, <#="\r\n"#><# 
#>			<#=lifestyleTarget#><#=lifestyle#>Generic<OpenOptions> <#=lifestyleTarget#><#=lifestyle#>2, <#="\r\n"#><# 
#>			<#=lifestyleTarget#><#=lifestyle#>Generic<ClosedOptions> <#=lifestyleTarget#><#=lifestyle#>3, <#="\r\n"#><# 
#>			<#=lifestyleTarget#><#=lifestyle#>Disposable <#=lifestyleTarget#><#=lifestyle#>4<# 

			var a = Array.IndexOf(lifestyles, lifestyle)+1; 
			var b = Array.IndexOf(lifestyleTargets, lifestyleTarget)+1; 
			var index = (a) * (b); #> <#= index < 8 ? ",\r\n" : "" #><# 
			}
		}
#>)
		{
<# 
		foreach(var lifestyleTarget in lifestyleTargets) 
		{
			if (lifestyleTarget != "CrossWired") continue;

			foreach(var lifestyle in lifestyles) 
			{
#>			if (<#=lifestyleTarget#><#=lifestyle#>1 == null) throw new ArgumentException(nameof(<#=lifestyleTarget#><#=lifestyle#>1)); <#="\r\n"#><# 
#>			if (<#=lifestyleTarget#><#=lifestyle#>2 == null) throw new ArgumentException(nameof(<#=lifestyleTarget#><#=lifestyle#>2)); <#="\r\n"#><# 
#>			if (<#=lifestyleTarget#><#=lifestyle#>3 == null) throw new ArgumentException(nameof(<#=lifestyleTarget#><#=lifestyle#>3)); <#="\r\n"#><# 
#>			if (<#=lifestyleTarget#><#=lifestyle#>4 == null) throw new ArgumentException(nameof(<#=lifestyleTarget#><#=lifestyle#>4)); <#="\r\n"#><# 
			}
		}
#>		}
	}

	public partial class TagHelperCrossWired : TagHelper
	{
		public TagHelperCrossWired
		(
<# 
		foreach(var lifestyleTarget in lifestyleTargets) 
		{
			if (lifestyleTarget != "CrossWired") continue;

			foreach(var lifestyle in lifestyles) 
			{
#>			<#=lifestyleTarget#><#=lifestyle#> <#=lifestyleTarget#><#=lifestyle#>1, <#="\r\n"#><# 
#>			<#=lifestyleTarget#><#=lifestyle#>Generic<OpenOptions> <#=lifestyleTarget#><#=lifestyle#>2, <#="\r\n"#><# 
#>			<#=lifestyleTarget#><#=lifestyle#>Generic<ClosedOptions> <#=lifestyleTarget#><#=lifestyle#>3, <#="\r\n"#><# 
#>			<#=lifestyleTarget#><#=lifestyle#>Disposable <#=lifestyleTarget#><#=lifestyle#>4<# 

			var a = Array.IndexOf(lifestyles, lifestyle)+1; 
			var b = Array.IndexOf(lifestyleTargets, lifestyleTarget)+1; 
			var index = (a) * (b); #> <#= index < 8 ? ",\r\n" : "" #><# 
			}
		}
#>)
		{
<# 
		foreach(var lifestyleTarget in lifestyleTargets) 
		{
			if (lifestyleTarget != "CrossWired") continue;

			foreach(var lifestyle in lifestyles) 
			{
#>			if (<#=lifestyleTarget#><#=lifestyle#>1 == null) throw new ArgumentException(nameof(<#=lifestyleTarget#><#=lifestyle#>1)); <#="\r\n"#><# 
#>			if (<#=lifestyleTarget#><#=lifestyle#>2 == null) throw new ArgumentException(nameof(<#=lifestyleTarget#><#=lifestyle#>2)); <#="\r\n"#><# 
#>			if (<#=lifestyleTarget#><#=lifestyle#>3 == null) throw new ArgumentException(nameof(<#=lifestyleTarget#><#=lifestyle#>3)); <#="\r\n"#><# 
#>			if (<#=lifestyleTarget#><#=lifestyle#>4 == null) throw new ArgumentException(nameof(<#=lifestyleTarget#><#=lifestyle#>4)); <#="\r\n"#><# 
			}
		}
#>		}
	}

	public partial class ViewComponentCrossWired : ViewComponent
	{
		public ViewComponentCrossWired
		(
<# 
		foreach(var lifestyleTarget in lifestyleTargets) 
		{
			if (lifestyleTarget != "CrossWired") continue;

			foreach(var lifestyle in lifestyles) 
			{
#>			<#=lifestyleTarget#><#=lifestyle#> <#=lifestyleTarget#><#=lifestyle#>1, <#="\r\n"#><# 
#>			<#=lifestyleTarget#><#=lifestyle#>Generic<OpenOptions> <#=lifestyleTarget#><#=lifestyle#>2, <#="\r\n"#><# 
#>			<#=lifestyleTarget#><#=lifestyle#>Generic<ClosedOptions> <#=lifestyleTarget#><#=lifestyle#>3, <#="\r\n"#><# 
#>			<#=lifestyleTarget#><#=lifestyle#>Disposable <#=lifestyleTarget#><#=lifestyle#>4<# 

			var a = Array.IndexOf(lifestyles, lifestyle)+1; 
			var b = Array.IndexOf(lifestyleTargets, lifestyleTarget)+1; 
			var index = (a) * (b); #> <#= index < 8 ? ",\r\n" : "" #><# 
			}
		}
#>)

		{
<# 
		foreach(var lifestyleTarget in lifestyleTargets) 
		{
			if (lifestyleTarget != "CrossWired") continue;

			foreach(var lifestyle in lifestyles) 
			{
#>			if (<#=lifestyleTarget#><#=lifestyle#>1 == null) throw new ArgumentException(nameof(<#=lifestyleTarget#><#=lifestyle#>1)); <#="\r\n"#><# 
#>			if (<#=lifestyleTarget#><#=lifestyle#>2 == null) throw new ArgumentException(nameof(<#=lifestyleTarget#><#=lifestyle#>2)); <#="\r\n"#><# 
#>			if (<#=lifestyleTarget#><#=lifestyle#>3 == null) throw new ArgumentException(nameof(<#=lifestyleTarget#><#=lifestyle#>3)); <#="\r\n"#><# 
#>			if (<#=lifestyleTarget#><#=lifestyle#>4 == null) throw new ArgumentException(nameof(<#=lifestyleTarget#><#=lifestyle#>4)); <#="\r\n"#><# 
			}
		}
#>		}
	}
}
